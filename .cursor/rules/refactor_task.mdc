---
description: 重构项目 ，清理代码，refactor
globs: 
alwaysApply: false
---

好的，我们来将重构和清理工作整理成一个更详细的任务文档结构。这有助于我们系统地进行，并确保每个环节都考虑到位。

---

## **任务文档：BI 数据同步项目 - 代码重构与清理 (V1)**

**目标:**

*   提升代码库的可维护性、可读性和健壮性。
*   确保核心数据同步功能的稳定性和数据一致性（特别是事务处理）。
*   移除冗余或不再使用的代码。
*   为未来可能的扩展打下更坚实的基础。

**基本原则:**

*   **安全第一:** 始终在独立分支 (`refactor/cleanup`) 上操作，确保可回滚。
*   **小步提交:** 每个逻辑单元的重构完成后，进行 Git 提交。
*   **持续验证:** 在关键步骤后及最终完成后，通过基线测试验证功能未受影响。
*   **清晰注释:** 对重要的重构决策或复杂逻辑添加注释。

---

### **阶段一：准备与评估 (Preparation & Assessment)**

**任务 1.1: 设置版本控制环境**

*   **负责人:** User
*   **操作:**
    1.  确认当前工作目录 (`D:\cursor开发工程\BI`) 在 `main` (或主) 分支上是干净的 (`git status`)。
    2.  提交所有未提交的更改 (`git add . && git commit -m "Feat: Implement order detail fetching and initial fixes"` 或类似描述)。
    3.  创建新的重构分支: `git checkout -b refactor/cleanup`
    4.  确认已切换到新分支: `git branch`
*   **产出:** 一个基于最新稳定代码的、独立的 `refactor/cleanup` 分支。
*   **状态:** `[ ] To Do`

**任务 1.2: 定义基线测试流程与预期**

*   **负责人:** User / AI
*   **操作:**
    1.  **定义测试命令:**
        *   `TC1: python scripts/sync_xiaoe.py --sync-type incremental`
        *   `TC2: python scripts/sync_xiaoe.py --sync-type status_update`
        *   `TC3: python scripts/sync_xiaoe.py --sync-type aftersales --full` (可选，如果需要测试)
        *   `TC4: python scripts/sync_xiaoe.py --sync-type aftersales` (可选，如果需要测试)
    2.  **定义预期行为/日志检查点:**
        *   所有命令应能完整执行，无 `Traceback` 报错退出 (非 API 错误)。
        *   TC1 应记录获取 `last_sync_time`，处理订单（包括获取详情和 upsert），并在最后更新 `sync_status` 表的 `last_sync_time`。
        *   TC2 应记录扫描指定日期范围，处理订单（获取详情和 upsert），最后更新 `sync_status` 但*不*更新 `last_sync_time`。
        *   TC3/TC4 (如果执行) 应记录处理售后订单和项目，并更新相应的 `sync_status`。
        *   日志中不应出现关于 `commit` 或事务处理的明显错误。
    3.  **定义数据库检查点 (手动):**
        *   运行 TC1/TC2 后，随机抽查数据库 `orders` 表中几条对应 `order_id` 的记录，确认其 `last_updated_at` 时间戳已更新。
        *   检查对应的 `order_items` 表，确认 `quantity` 字段有值且与预期一致（如果了解某订单的实际情况）。
        *   检查 `sync_status` 表，确认对应 `sync_target` 的状态、运行时间、消息以及（对于 TC1/TC4）`last_sync_time` 已按预期更新。
*   **产出:** 一份明确的测试步骤和验证标准文档（可以就是这段文字或单独记录）。
*   **状态:** `[ ] To Do`

**任务 1.3: 执行基线测试并记录结果**

*   **负责人:** User (执行与记录) / AI (提供命令)
*   **操作:**
    1.  在 `refactor/cleanup` 分支上（修改前），逐一执行 **任务 1.2** 中定义的测试命令 (TC1, TC2, 及可选的 TC3, TC4)。
    2.  仔细观察日志输出，记录关键信息（例如，处理了多少订单、有无错误）。
    3.  执行 **任务 1.2** 中定义的数据库检查，记录观察结果。
*   **产出:** 一份记录当前代码运行状态的基线测试结果。
*   **状态:** `[ ] To Do`

**任务 1.4: 确认重构目标与范围**

*   **负责人:** User / AI
*   **操作:**
    1.  **最终确认重构点:**
        *   **[核心] 事务一致性:** Loader 函数 (如 `upsert_data`, `replace_aftersale_items`) 不 commit，调用方 (sync 函数) 在 `try` 块成功后 commit。
        *   **[清理] 移除冗余 Transformer:** 删除 `transform_order`, `transform_order_items`。
        *   **[规范] `sync_target` 常量化:** 提取硬编码字符串到 `config/constants.py`。
        *   **[优化] 提取共享处理逻辑:** (可选) 将订单详情处理逻辑封装为 `_process_order_details` 辅助函数。
    2.  记录最终确定的重构范围。
*   **产出:** 明确的重构任务清单。
*   **状态:** `[ ] To Do`

---

### **阶段二：执行重构与清理 (Execution)**

*（以下任务在 `refactor/cleanup` 分支上执行，建议每完成一项即进行 `git commit`）*

**任务 2.1: 验证并确保事务处理一致性**

*   **负责人:** AI (代码检查/修改) / User (确认)
*   **操作:**
    1.  检查 `core/loaders.py` 中的 `upsert_data` 和 `replace_aftersale_items`，确认无 `db.commit()`。 (我们已完成)
    2.  检查 `scripts/sync_xiaoe.py` 中 `run_incremental_sync`, `run_status_update_sync`, `run_after_sale_sync` 的 `try` 块，确认在数据处理成功后、更新状态前有 `db.commit()`。 (我们已完成)
    3.  执行 `git commit -m "Refactor: Ensure consistent transaction handling"`。
*   **验证:** 代码审查。
*   **状态:** `[X] Done` (基于我们之前的操作)

**任务 2.2: `sync_target` 常量化**

*   **负责人:** AI (代码生成/修改) / User (确认)
*   **操作:**
    1.  创建 `config/constants.py` 文件。
    2.  在 `config/constants.py` 中定义常量:
        ```python
        # config/constants.py
        SYNC_TARGET_XIAOE_ORDER_INCREMENTAL = "xiaoe_order_incremental"
        SYNC_TARGET_XIAOE_ORDER_STATUS_UPDATE = "xiaoe_order_status_update"
        SYNC_TARGET_XIAOE_AFTERSALE_INCREMENTAL = "xiaoe_aftersale_incremental"
        SYNC_TARGET_XIAOE_AFTERSALE_FULL = "xiaoe_aftersale_full"
        # 可以添加其他平台的 sync_target
        ```
    3.  修改 `scripts/sync_xiaoe.py`:
        *   在文件顶部添加 `from config.constants import *` (或具体导入需要的常量)。
        *   将 `run_incremental_sync`, `run_status_update_sync`, `run_after_sale_sync` 中硬编码的 `sync_target` 字符串替换为对应的常量。
    4.  执行 `git commit -m "Refactor: Centralize sync_target constants"`。
*   **验证:** 代码审查，确认替换无误。
*   **状态:** `[ ] To Do`

**任务 2.3: 移除冗余 Transformer 函数**

*   **负责人:** AI (代码分析/修改) / User (确认)
*   **操作:**
    1.  (AI) 使用代码搜索确认 `transform_order` 和 `transform_order_items` 在项目中已无调用。
    2.  (AI) 如果确认无调用，从 `platforms/xiaoe/transformers.py` 文件中删除这两个函数的定义。
    3.  (AI) 从 `scripts/sync_xiaoe.py` (大约第 29 行) 的导入语句中移除 `transform_order`, `transform_order_items`。
    4.  执行 `git commit -m "Cleanup: Remove unused transformer functions"`。
*   **验证:** 代码搜索确认无引用，脚本基本导入不报错。
*   **状态:** `[ ] To Do`

**任务 2.4: (可选) 提取共享处理逻辑**

*   **负责人:** AI (代码生成/修改) / User (决策/确认)
*   **操作:**
    1.  (User 决策) 是否执行此优化？
    2.  (AI) 如果是，在 `scripts/sync_xiaoe.py` 中定义 `_process_order_details(db: Session, client: XiaoeClient, order_id: str) -> bool` 函数，包含 `try-except` 逻辑来获取详情、转换、调用 `upsert_order_with_items`，返回 `True` 表示成功，`False` 表示失败。
    3.  (AI) 修改 `run_incremental_sync` 和 `run_status_update_sync` 中的循环，调用 `_process_order_details` 并根据返回值更新 `processed_order_count` 和 `failed_order_count`。
    4.  执行 `git commit -m "Refactor: Extract shared order detail processing logic"`。
*   **验证:** 代码审查，确保逻辑等价。
*   **状态:** `[ ] To Do (Optional)`

---

### **阶段三：验证与合并 (Verification & Merge)**

**任务 3.1: 执行回归测试**

*   **负责人:** User (执行与对比) / AI (提供命令/分析)
*   **操作:**
    1.  在 `refactor/cleanup` 分支上（完成所有重构后），再次执行 **任务 1.2** 中定义的所有测试命令。
    2.  对比本次的日志输出和数据库状态与 **任务 1.3** 中记录的基线结果。
    3.  **关键检查:**
        *   功能是否仍然按预期工作？
        *   是否有新的错误或非预期的行为出现？
        *   数据（特别是 `OrderItem.quantity` 和 `SyncStatus.last_sync_time`）是否仍然正确？
    4.  如果发现问题 (回归错误)，回到**阶段二**进行修复，然后重新执行本任务，直到测试通过。
*   **产出:** 确认重构后的代码功能与之前一致。
*   **状态:** `[ ] To Do`

**任务 3.2: 最终代码审查**

*   **负责人:** User / AI
*   **操作:**
    1.  使用 `git diff main...refactor/cleanup` 查看所有更改。
    2.  检查代码风格、命名、注释是否清晰。
    3.  再次确认逻辑的正确性。
*   **产出:** 对本次重构代码的最终确认。
*   **状态:** `[ ] To Do`

**任务 3.3: 合并分支**

*   **负责人:** User
*   **操作:**
    1.  切换到主分支: `git checkout main`
    2.  拉取最新代码 (以防万一): `git pull origin main` (如果使用了远程仓库)
    3.  合并重构分支: `git merge --no-ff refactor/cleanup` (`--no-ff` 保留合并历史)
    4.  解决可能出现的合并冲突。
    5.  推送主分支: `git push origin main` (如果使用了远程仓库)
    6.  (可选) 删除本地重构分支: `git branch -d refactor/cleanup`
    7.  (可选) 删除远程重构分支: `git push origin --delete refactor/cleanup`
*   **产出:** 清理后的代码合并入主开发线。
*   **状态:** `[ ] To Do`

---
这个文档提供了更结构化的步骤和明确的负责人（尽管很多时候是 AI 辅助 User）。我们可以按照这个清单逐项进行。

现在，我们应该从 **任务 1.1 (设置版本控制环境)** 开始。请您在本地执行相应的 Git 操作。

