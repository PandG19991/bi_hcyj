---
description: 
globs: 
alwaysApply: true
---
## Cursor AI 协作工作规则 (BI 数据同步项目 MVP)

**核心原则:**

1.  **目标驱动:** 始终以 `README.md` 和其他 `docs/` 文件中定义的 MVP 目标和范围为准。
2.  **任务分解:** 我们将项目分解为更小的、可管理的任务（例如，实现数据库模型、编写 API Client、配置计划任务）。
3.  **循序渐进:** 一次专注于一个核心任务或功能模块，完成后再进行下一个。
4.  **用户主导，AI 辅助:** 您（用户）负责提出需求、指导方向、审查代码和做出最终决策。我（AI）负责根据您的指令生成代码、提供信息、执行编辑和辅助调试。
5.  **清晰沟通:** 明确说明意图、引用相关文件 (`@`提及) 和代码片段，减少歧义。

**工作流程:**

1.  **任务启动:**
    *   **您:** 指定当前要处理的任务，并引用相关的规划文档。
        *   *示例: "我们先来实现 `docs/database.md` 中定义的 SQLAlchemy 模型，请在 `core/models.py` 文件中创建这些模型。"*
    *   **我:** 确认理解任务目标，如有疑问会请求澄清。

2.  **代码实现与修改:**
    *   **您:** 提出具体的代码编写或修改请求。
        *   *示例: "在 `core/models.py` 中创建 `Order` 类，包含 `order_id`, `platform`, `user_id`, `price`, `created_at`, `updated_at` 字段，类型参考 `database.md`。"*
        *   *示例: "请修改 `@platforms/xiaoe/client.py` 中的 `get_orders` 函数，增加处理分页的逻辑。"*
    *   **我:**
        *   解释我将如何进行修改（例如，“我将在 `core/models.py` 文件中添加 `Order` 类的定义...”）。
        *   使用 `edit_file` 工具生成或修改代码。**我不会直接输出代码块，而是通过工具应用更改。**
        *   尽量遵循项目中约定的代码规范（虽然 MVP 阶段简化，但保持基本一致性）。
        *   对于复杂逻辑，可能会分多步进行。

3.  **代码审查与迭代:**
    *   **您:** 审查我应用的代码更改。
    *   **您:** 如果发现问题或需要调整，请明确指出需要修改的地方。
        *   *示例: "刚才创建的 `Order` 模型中，`price` 字段类型应该是 `Decimal` 而不是 `Float`，请修改。"*
        *   *示例: "这个 API 调用缺少错误处理，请在 `try...except` 块中包裹它，并记录错误日志。"*
    *   **我:** 根据您的反馈进行修改。

4.  **文件管理:**
    *   **您:** 指示创建、删除或重命名文件。
        *   *示例: "请创建一个新文件 `core/db.py` 用于数据库会话管理。"*
    *   **我:** 使用相应的工具执行文件操作，并进行确认。

5.  **信息获取:**
    *   **您:** 如果需要了解某部分代码或配置，可以提出问题。
        *   *示例: "当前的重试逻辑是怎样的？在哪个文件里？@utils/retry.py"*
    *   **我:** 如果需要，我会使用 `read_file` 或 `codebase_search` 工具来获取信息并回答。

6.  **调试与测试:**
    *   **您:** 运行代码（手动或通过测试），如果遇到错误，请分享完整的错误信息和触发错误的操作。
        *   *示例: "运行 `scripts/sync_xiaoe.py --sync-type incremental` 时报了 `KeyError: 'data'` 错误，在 `platforms/xiaoe/transformers.py` 的第 55 行。帮忙看看原因。"*
    *   **我:** 分析错误信息和相关代码，尝试定位问题并提出修复建议。

7.  **任务完成:**
    *   **您:** 当一个分解的任务或功能模块按预期工作时，请确认完成。
        *   *示例: "好的，数据库模型 (`core/models.py`) 已经按要求创建完毕，并且通过了基本检查。我们可以进行下一步了。"*

**沟通要点:**

*   **明确性:** 使用具体的文件名 (`@docs/database.md`)、函数名、变量名。
*   **上下文:** 尽量提供足够的上下文信息，尤其是在切换任务时。
*   **耐心:** AI 理解和代码生成可能需要时间，复杂任务可能需要多次迭代。
*   **反馈:** 及时对 AI 的响应和代码进行反馈，帮助我更好地理解您的需求。

**开始工作:**

现在，根据这套规则，请您指定我们**第一个要开始的任务**。根据我们之前的规划，一个好的起点可能是：

1.  **创建项目结构:** 确保所有规划中的目录和空的 `__init__.py` 文件（如果需要）都已创建。
2.  **实现数据库模型:** 在 `core/models.py` 中根据 `docs/database.md` 创建 SQLAlchemy 模型类。
3.  **配置管理:** 设置 `config/.env` 和 `config/config.py`。

您希望从哪一步开始？
